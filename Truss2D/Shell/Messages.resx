<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddForce" xml:space="preserve">
    <value>Add a force on a joint. 
    Syntax: 'exert a 5 3'.  This add force vector [5,3] onto joint A.</value>
  </data>
  <data name="AddJoints" xml:space="preserve">
    <value>Start the joint-adding process. You will be prompted "A:", "B:"  Press Enter to quit the flow. You can restart the process any time. Note that this process do not impact the truss directly. Any un-linked joints will be ignored.</value>
  </data>
  <data name="Assumption_Message" xml:space="preserve">
    <value>This program ASSUME the equilibrium of the truss, 
and does not assume extreme cases (e.g. trusses not 
in equilibrium. Please do not be surprised if the 
program does not work as intended on some edgy 
trusses.</value>
  </data>
  <data name="ClearForce" xml:space="preserve">
    <value>Clear the force at a certain joint.
    Syntax: 'clearf a b'. This clears the forces / reactions at joint A and joint B.</value>
  </data>
  <data name="Flow_Message" xml:space="preserve">
    <value>The flow of the program is outlined as follows:
1. Add joints
2. Link joints, or, Add forces onto a joint. 
3. Repeat step 1. and 2.
4. When feel ready, solve the truss and get the result.
5. If the truss is of little use, restart.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>The help menu that you see right here.</value>
  </data>
  <data name="Help_Welcome" xml:space="preserve">
    <value>Enter 'help' for a complete help menu ...</value>
  </data>
  <data name="LinkJoints" xml:space="preserve">
    <value>Link the joints. 
    Syntax: 'link ab'. This links joint A and joint B (case insensative).</value>
  </data>
  <data name="Lookup" xml:space="preserve">
    <value>Look up the internal force of a specific edge. Should be called after solving.
    Syntax: see ab cd de'. This looks up the internal forces in member AB, CD and DE.</value>
  </data>
  <data name="LookupAll" xml:space="preserve">
    <value>Lookup all the internal forces stored.</value>
  </data>
  <data name="MaxInternalForce" xml:space="preserve">
    <value>Look up the maximum internal force.</value>
  </data>
  <data name="MinInternalForce" xml:space="preserve">
    <value>Look up the minimum intenral force.</value>
  </data>
  <data name="PrintForces" xml:space="preserve">
    <value>Prints all added forces.</value>
  </data>
  <data name="PrintJoints" xml:space="preserve">
    <value>Prints all added joints.</value>
  </data>
  <data name="PrintMembers" xml:space="preserve">
    <value>Prints all added members.</value>
  </data>
  <data name="Quit" xml:space="preserve">
    <value>Quits the program.</value>
  </data>
  <data name="Render" xml:space="preserve">
    <value>This solve for the truss and print out all solved internal forces.</value>
  </data>
  <data name="ResetJointCoord" xml:space="preserve">
    <value>Resets the coordinate of a particular joint. 
    Syntax: 'reset a 3 4'. This resets joint A to coordinate (3,4).</value>
  </data>
  <data name="Restart" xml:space="preserve">
    <value>Restart the truss-building process. Clear all progress.</value>
  </data>
  <data name="RestartMessage" xml:space="preserve">
    <value>Successfully restarted ...</value>
  </data>
</root>